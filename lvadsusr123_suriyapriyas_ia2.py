# -*- coding: utf-8 -*-
"""LVADSUSR123_SuriyapriyaS_IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b2A0gChdq5lvUeIckeYTYcgrjVnhCKj2

**QUESTION 1**
"""

import pandas as pd
import numpy as np

def rgbtogray(rgbimage):
    return np.dot(rgbimage, [0.2989, 0.5870, 0.1140])

rgbimage = np.array([[[255,0,0],[0,255,0],[0,0,255]],
                      [[255,255,0],[255,0,255],[0,255,255]],
                      [[127,127,127],[200,200,200],[50,50,50]]])

gray_image = rgbtogray(rgbimage)
print(gray_image)

"""**QUESTION2**"""

import numpy as np

def normalize(data):
    mean = np.mean(data, axis=0)
    sd = np.std(data, axis=0)
    normalized = (data - mean) / sd
    return normalized

healthdata = np.array([[170, 70, 30],
                        [165, 65, 40],
                        [180, 80, 25]])
normalized_healthdata = normalize(healthdata)
print(normalized_healthdata)

"""**QUESTION3**"""

import numpy as np

sensordata = np.array([[[1, 2, 3],
                         [4, 5, 6]],
                        [[7, 8, 9],
                         [10, 11, 12]],
                        [[13, 14, 15],
                         [16, 17, 18]]])

flattened = [sensor.flatten() for sensor in sensordata]
reshaped = np.array(flattened)
print(reshaped)

"""QUESTION4"""

import numpy as np

performance = np.array([[10, 12, 15, 18],
                               [8, 11, 14, 17],
                               [9, 13, 16, 20]])

firstgame = performance[:, 0]
lastgame = performance[:, -1]
improvement = lastgame - firstgame
print('Improvement:', improvement)

"""QUESTION5"""

import numpy as np

scores = np.array([[80, 75, -1, 90, 70],
                   [75, 90, -1, 88, 92],
                   [92, 80, 90, -1, 85],
                   [92, 80, 90, 80, 85]])

lastthree = scores[:, -3:].astype(float)
lastthree[lastthree == -1] = np.nan
avglastthree = np.nanmean(lastthree, axis=1)

print("Average:", avglastthree)

"""QUESTION6"""

import numpy as np

def applyadjfactors(citytemp, monthlyadj):
    adjfac = monthlyadj[:, np.newaxis]
    adjtemp = citytemp * adjfac
    return adjtemp

citytemp = np.array([[20, 22, 25, 27],
                        [18, 20, 23, 25],
                        [22, 24, 27, 29]])

monthlyadj = np.array([0.95, 1.0, 1.05, 1.1])
adjtemp = applyadjfactors(citytemp, monthlyadj)
print("Adjusted temperatures:", adjtemp)

"""QUESTION7"""

import pandas as pd

data = {
    'Name':['Alice','Bob','Charlie','David','Eve','Frank','Grace'],
    'Age': [25,30,35,40,45,50,55],
    'City':['New York','Los Angeles','Chicago','Houston','Phoenix','Miami','Boston'],
    'Department': ['HR','IT','Finance','Marketing','Sales','IT','HR']
}

df = pd.DataFrame(data)

filtered = df[(df['Age'] < 45) & (df['Department'] != 'HR')][['Name', 'City']]
result = filtered.to_dict('records')
print(result)

"""QUESTION8"""

import pandas as pd

data = {
    'Product': ['Apple', 'Banana', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 1.50, 3.00, 2.50, 4.50, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

df = pd.DataFrame(data)
avgcatprice = df.groupby('Category')['Price'].mean()
avgfruitprice = avgcatprice['Fruit']
filtered = df[(df['Category'] == 'Fruit') & (df['Price'] > avgfruitprice) & (~df['Promotion'])]

print(filtered)

QUESTION9

import pandas as pd

employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}
employee_df = pd.DataFrame(employee_data)

project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}
project_df = pd.DataFrame(project_data)

merged_df = project_df.merge(employee_df, on='Employee', how='left')
print(merged_df)

"""QUESTION10"""

import pandas as pd

data = {
    'Department':['Electronics','Electronics','Clothing','Clothing','Home','Goods'],
    'Salesperson':['Alice','Bob','Charlie','David','Eve','Alice'],
    'Sales':[70000,50000,30000,40000,6000,8000]
}

df = pd.DataFrame(data)

avgperperson = df.groupby(['Department', 'Salesperson'])['Sales'].mean().reset_index()
avgperdept = avgperperson.groupby('Department')['Sales'].mean().reset_index()

ranking = avgperdept.sort_values(by='Sales', ascending=False).reset_index(drop=True)
print(ranking)