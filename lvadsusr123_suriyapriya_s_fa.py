# -*- coding: utf-8 -*-
"""LVADSUSR123-Suriyapriya S-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WNUuJC_mDseHPJO9GJWhfdFPjEVZVDu3
"""

import pandas as pd
import numpy as np
data = pd.read_excel('/content/drive/MyDrive/Walmart_Dataset Python_Final_Assessment.xlsx')

df=pd.DataFrame(data)

"""QUESTION 1"""

print("Number of rows:", len(df))
print("Number of columns:", len(df.columns))

print("Data types:")
print(df.dtypes)
print()

print("Summary statistics:")
print(df.describe())
print()

print('Data Information:')
print(df.info())
print()

"""**QUESTION 2**"""

missing = df.isnull().sum()
print("Missing Values Count:")
print(missing)

print(df.duplicated().sum())
df.drop_duplicates(inplace=True)

df.replace(np.nan,'VAL IS MISSING',inplace = True)
df.dropna(subset=['Quantity'], inplace=True)
df.fillna(df.mean(), inplace=True)
print("Missing values after cleaning:")
print(df.isnull().sum())

"""**QUESTION 3**"""

print(df.describe())
print()

numerical_columns = df.select_dtypes(include=['int64', 'float64'])

mean = numerical_columns.mean()
median = numerical_columns.median()
mode = numerical_columns.mode().iloc[0]
range = numerical_columns.max() - numerical_columns.min()
variance = numerical_columns.var()
std = numerical_columns.std()

descriptive_stats = pd.DataFrame({
    'Mean': mean,
    'Median': median,
    'Mode': mode,
    'Range': range,
    'Variance': variance,
    'Standard Deviation': std
})
print(descriptive_stats)

"""**QUESTION 4**"""

import matplotlib.pyplot as plt
import seaborn as sns

# Histogram
plt.figure(figsize=(10, 6))
sns.histplot(df['Sales'], kde=True)
plt.title('Distribution of Sales')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.show()
print()

# Box plot
plt.figure(figsize=(10, 6))
sns.boxplot(x='Category', y='Sales', data=df)
plt.title('Sales Distribution by Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.show()
print()

# Scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Quantity', y='Sales', data=df)
plt.title('Sales vs Quantity')
plt.xlabel('Quantity')
plt.ylabel('Sales')
plt.show()
print()

# Bar chart
plt.figure(figsize=(10, 6))
sales_by_category = df.groupby('Category')['Sales'].sum().sort_values(ascending=False)
sales_by_category.plot(kind='bar', color='skyblue')
plt.title('Sales Distribution by Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.show()
print()

# Pie chart
plt.figure(figsize=(8, 6))
plt.pie(sales_by_category, labels=sales_by_category.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
plt.title('Sales Proportion by Category')
plt.axis('equal')
plt.show()
print()

plt.figure(figsize=(10, 6))
Category_counts = df['Category'].value_counts()
fig = plt.figure(figsize =(20,7))
plt.pie(Category_counts, labels=Category_counts.index, autopct='%1.1f%%')
plt.title('Pie Chart of Categories')
plt.show()
print()

#Line chart
sales_by_year = df.groupby('Year')['Sales'].sum()
plt.figure(figsize=(10, 6))
sales_by_year.plot(kind='line', marker='o')
plt.title('Sales Trend Over Years')
plt.xlabel('Year')
plt.ylabel('Sales')
plt.grid(True)
plt.show()
print()

#Violin plot
plt.figure(figsize=(10, 6))
sns.violinplot(x='Category', y='Sales', data=df,hue='Category')
plt.title('Sales Distribution by Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.show()
print()

"""**QUESTION 5**"""

correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

correlation_interest = df[['Sales', 'Quantity']].corr()

sns.heatmap(correlation_interest, annot=True, fmt=".2f")
plt.title('Correlation Matrix (Sales, Quantity)')
plt.show()

"""**QUESTION 6**"""

plt.figure(figsize=(9, 5))
sns.boxplot(df['Sales'])
plt.title('Box Plot of Sales')
plt.xlabel('Sales')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x=df['Quantity'])
plt.xlabel('Quantity')
plt.title('Box plot of number of quantities sold')
plt.show()

"""QUESTION 7

**TREND ANALYSIS**
"""

df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Year'] = df['Order Date'].dt.year
sales_by_year = df.groupby('Year')['Sales'].sum()

plt.figure(figsize=(10, 6))
sales_by_year.plot(kind='line', marker='o')
plt.title('Sales Trend Over Years')
plt.xlabel('Year')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

df['Year'] = df['Order Date'].dt.year

salesbycat = df.groupby(['Year', 'Category'])['Sales'].sum().unstack()
salesgrowth = salesbycat.pct_change(axis=0) * 100
maxgrowth_cat = salesgrowth.mean().idxmax()

print("Category with the highest growth rate:", maxgrowth_cat)

"""**CUSTOMER ANALYSIS**"""

topcustomer = df.groupby('EmailID').agg({'Order ID': 'count', 'Sales': 'sum'}).sort_values(by='Order ID', ascending=False).head(5)
print(topcustomer)

df['Order Date'] = pd.to_datetime(df['Order Date'])
df.sort_values(by=['EmailID', 'Order Date'], inplace=True)
df['Time Between Orders'] = df.groupby('EmailID')['Order Date'].diff()
avgtime = df.groupby('EmailID')['Time Between Orders'].mean()
print("Average time between purchases for each customer:")
print(avgtime)

"""**COMPREHENSIVE ANALYTICS**

**i.** We can optimise the supply chain by understanding how fast the products are getting sold, and how fast the orders are processed and delivered, we can identify which products are in more demand and whichever products has to be restocked more quickly to avoid out of stock problems.

This helps to streamline the imventory department of a company to have the right stocks at right time to get more profit. Not only we can solve the out of stock issues, we can also handle over stocking.

---



**ii.** Geographic sales distribution may be influenced by factors such as population density, income levels, preferences of a customer. It also depends on the market competition. By analysing sales data with respect to geography we can find the areas with high demand.

After that we can target those particular regions that are in need and target those regions. For say, certain products have a higher reach in urban areas than in rural areas. In such cases, we can modify our marketing strategies to deliver the right product to the right kind of audience.

---



**iii.** Patterns or predictors of high value customers includes certain factors like how often they are purchasing a product and the total spending amount, their product preferences etc. We can also analyse their behaviour with their participation in any of the marketing campaigns.

By doing all these, we can identify high value customers and we can personalise marketing efforts and offer exclusive rewards, coupon codes or promotions to enhance customer loyalty. This will also attract other new customers.
"""